/*
 * generated by Xtext 2.31.0
 */
grammar InternalTrek;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.metable.trek.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.metable.trek.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.metable.trek.services.TrekGrammarAccess;

}
@parser::members {
	private TrekGrammarAccess grammarAccess;

	public void setGrammarAccess(TrekGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getTypeAssignment()); }
		(rule__Model__TypeAssignment)*
		{ after(grammarAccess.getModelAccess().getTypeAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleType
entryRuleType
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeAccess().getGroup()); }
		(rule__Type__Group__0)
		{ after(grammarAccess.getTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRep
entryRuleRep
:
{ before(grammarAccess.getRepRule()); }
	 ruleRep
{ after(grammarAccess.getRepRule()); } 
	 EOF 
;

// Rule Rep
ruleRep 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRepAccess().getGroup()); }
		(rule__Rep__Group__0)
		{ after(grammarAccess.getRepAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRepComponent
entryRuleRepComponent
:
{ before(grammarAccess.getRepComponentRule()); }
	 ruleRepComponent
{ after(grammarAccess.getRepComponentRule()); } 
	 EOF 
;

// Rule RepComponent
ruleRepComponent 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRepComponentAccess().getGroup()); }
		(rule__RepComponent__Group__0)
		{ after(grammarAccess.getRepComponentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRepComponentType
entryRuleRepComponentType
:
{ before(grammarAccess.getRepComponentTypeRule()); }
	 ruleRepComponentType
{ after(grammarAccess.getRepComponentTypeRule()); } 
	 EOF 
;

// Rule RepComponentType
ruleRepComponentType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRepComponentTypeAccess().getAlternatives()); }
		(rule__RepComponentType__Alternatives)
		{ after(grammarAccess.getRepComponentTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSystemType
entryRuleSystemType
:
{ before(grammarAccess.getSystemTypeRule()); }
	 ruleSystemType
{ after(grammarAccess.getSystemTypeRule()); } 
	 EOF 
;

// Rule SystemType
ruleSystemType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSystemTypeAccess().getTypeNameAssignment()); }
		(rule__SystemType__TypeNameAssignment)
		{ after(grammarAccess.getSystemTypeAccess().getTypeNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTypeType
entryRuleTypeType
:
{ before(grammarAccess.getTypeTypeRule()); }
	 ruleTypeType
{ after(grammarAccess.getTypeTypeRule()); } 
	 EOF 
;

// Rule TypeType
ruleTypeType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeTypeAccess().getTypeAssignment()); }
		(rule__TypeType__TypeAssignment)
		{ after(grammarAccess.getTypeTypeAccess().getTypeAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RepComponentType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRepComponentTypeAccess().getSystemTypeParserRuleCall_0()); }
		ruleSystemType
		{ after(grammarAccess.getRepComponentTypeAccess().getSystemTypeParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getRepComponentTypeAccess().getTypeTypeParserRuleCall_1()); }
		ruleTypeType
		{ after(grammarAccess.getRepComponentTypeAccess().getTypeTypeParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SystemType__TypeNameAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSystemTypeAccess().getTypeNameStringKeyword_0_0()); }
		'string'
		{ after(grammarAccess.getSystemTypeAccess().getTypeNameStringKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getSystemTypeAccess().getTypeNameIntKeyword_0_1()); }
		'int'
		{ after(grammarAccess.getSystemTypeAccess().getTypeNameIntKeyword_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getSystemTypeAccess().getTypeNameBooleanKeyword_0_2()); }
		'boolean'
		{ after(grammarAccess.getSystemTypeAccess().getTypeNameBooleanKeyword_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getSystemTypeAccess().getTypeNameCharKeyword_0_3()); }
		'char'
		{ after(grammarAccess.getSystemTypeAccess().getTypeNameCharKeyword_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getSystemTypeAccess().getTypeNameDoubleKeyword_0_4()); }
		'double'
		{ after(grammarAccess.getSystemTypeAccess().getTypeNameDoubleKeyword_0_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Type__Group__0__Impl
	rule__Type__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeAccess().getTypeKeyword_0()); }
	'type'
	{ after(grammarAccess.getTypeAccess().getTypeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Type__Group__1__Impl
	rule__Type__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeAccess().getNameAssignment_1()); }
	(rule__Type__NameAssignment_1)
	{ after(grammarAccess.getTypeAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Type__Group__2__Impl
	rule__Type__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getTypeAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Type__Group__3__Impl
	rule__Type__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeAccess().getRepsAssignment_3()); }
	(rule__Type__RepsAssignment_3)*
	{ after(grammarAccess.getTypeAccess().getRepsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Type__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getTypeAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Rep__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rep__Group__0__Impl
	rule__Rep__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rep__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRepAccess().getRepKeyword_0()); }
	'rep'
	{ after(grammarAccess.getRepAccess().getRepKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rep__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rep__Group__1__Impl
	rule__Rep__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Rep__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRepAccess().getNameAssignment_1()); }
	(rule__Rep__NameAssignment_1)
	{ after(grammarAccess.getRepAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rep__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rep__Group__2__Impl
	rule__Rep__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Rep__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRepAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getRepAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rep__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rep__Group__3__Impl
	rule__Rep__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Rep__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getRepAccess().getComponentsAssignment_3()); }
		(rule__Rep__ComponentsAssignment_3)
		{ after(grammarAccess.getRepAccess().getComponentsAssignment_3()); }
	)
	(
		{ before(grammarAccess.getRepAccess().getComponentsAssignment_3()); }
		(rule__Rep__ComponentsAssignment_3)*
		{ after(grammarAccess.getRepAccess().getComponentsAssignment_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rep__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rep__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rep__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRepAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getRepAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RepComponent__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RepComponent__Group__0__Impl
	rule__RepComponent__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RepComponent__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRepComponentAccess().getTypeAssignment_0()); }
	(rule__RepComponent__TypeAssignment_0)
	{ after(grammarAccess.getRepComponentAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RepComponent__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RepComponent__Group__1__Impl
	rule__RepComponent__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RepComponent__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRepComponentAccess().getNameAssignment_1()); }
	(rule__RepComponent__NameAssignment_1)
	{ after(grammarAccess.getRepComponentAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RepComponent__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RepComponent__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RepComponent__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRepComponentAccess().getSemicolonKeyword_2()); }
	';'
	{ after(grammarAccess.getRepComponentAccess().getSemicolonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__TypeAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getTypeTypeParserRuleCall_0()); }
		ruleType
		{ after(grammarAccess.getModelAccess().getTypeTypeParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getTypeAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__RepsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getRepsRepParserRuleCall_3_0()); }
		ruleRep
		{ after(grammarAccess.getTypeAccess().getRepsRepParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rep__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRepAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getRepAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rep__ComponentsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRepAccess().getComponentsRepComponentParserRuleCall_3_0()); }
		ruleRepComponent
		{ after(grammarAccess.getRepAccess().getComponentsRepComponentParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RepComponent__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRepComponentAccess().getTypeRepComponentTypeParserRuleCall_0_0()); }
		ruleRepComponentType
		{ after(grammarAccess.getRepComponentAccess().getTypeRepComponentTypeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RepComponent__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRepComponentAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getRepComponentAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SystemType__TypeNameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSystemTypeAccess().getTypeNameAlternatives_0()); }
		(rule__SystemType__TypeNameAlternatives_0)
		{ after(grammarAccess.getSystemTypeAccess().getTypeNameAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeType__TypeAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeTypeAccess().getTypeTypeCrossReference_0()); }
		(
			{ before(grammarAccess.getTypeTypeAccess().getTypeTypeIDTerminalRuleCall_0_1()); }
			RULE_ID
			{ after(grammarAccess.getTypeTypeAccess().getTypeTypeIDTerminalRuleCall_0_1()); }
		)
		{ after(grammarAccess.getTypeTypeAccess().getTypeTypeCrossReference_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
