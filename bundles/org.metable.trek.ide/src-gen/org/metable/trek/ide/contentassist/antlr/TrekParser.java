/*
 * generated by Xtext 2.31.0
 */
package org.metable.trek.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.metable.trek.ide.contentassist.antlr.internal.InternalTrekParser;
import org.metable.trek.services.TrekGrammarAccess;

public class TrekParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(TrekGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, TrekGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getRepComponentTypeAccess().getAlternatives(), "rule__RepComponentType__Alternatives");
			builder.put(grammarAccess.getSystemTypeAccess().getTypeNameAlternatives_0(), "rule__SystemType__TypeNameAlternatives_0");
			builder.put(grammarAccess.getTypeAccess().getGroup(), "rule__Type__Group__0");
			builder.put(grammarAccess.getRepAccess().getGroup(), "rule__Rep__Group__0");
			builder.put(grammarAccess.getRepComponentAccess().getGroup(), "rule__RepComponent__Group__0");
			builder.put(grammarAccess.getModelAccess().getTypeAssignment(), "rule__Model__TypeAssignment");
			builder.put(grammarAccess.getTypeAccess().getNameAssignment_1(), "rule__Type__NameAssignment_1");
			builder.put(grammarAccess.getTypeAccess().getRepsAssignment_3(), "rule__Type__RepsAssignment_3");
			builder.put(grammarAccess.getRepAccess().getNameAssignment_1(), "rule__Rep__NameAssignment_1");
			builder.put(grammarAccess.getRepAccess().getComponentsAssignment_3(), "rule__Rep__ComponentsAssignment_3");
			builder.put(grammarAccess.getRepComponentAccess().getTypeAssignment_0(), "rule__RepComponent__TypeAssignment_0");
			builder.put(grammarAccess.getRepComponentAccess().getNameAssignment_1(), "rule__RepComponent__NameAssignment_1");
			builder.put(grammarAccess.getSystemTypeAccess().getTypeNameAssignment(), "rule__SystemType__TypeNameAssignment");
			builder.put(grammarAccess.getTypeTypeAccess().getTypeAssignment(), "rule__TypeType__TypeAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private TrekGrammarAccess grammarAccess;

	@Override
	protected InternalTrekParser createParser() {
		InternalTrekParser result = new InternalTrekParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public TrekGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(TrekGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
