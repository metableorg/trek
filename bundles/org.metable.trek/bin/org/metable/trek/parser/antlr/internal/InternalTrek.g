/*
 * generated by Xtext 2.31.0
 */
grammar InternalTrek;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.metable.trek.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.metable.trek.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.metable.trek.services.TrekGrammarAccess;

}

@parser::members {

 	private TrekGrammarAccess grammarAccess;

    public InternalTrekParser(TokenStream input, TrekGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected TrekGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getTypeTypeParserRuleCall_0());
			}
			lv_type_0_0=ruleType
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"type",
					lv_type_0_0,
					"org.metable.trek.Trek.Type");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='type'
		{
			newLeafNode(otherlv_0, grammarAccess.getTypeAccess().getTypeKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTypeAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getTypeAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeAccess().getRepsRepParserRuleCall_3_0());
				}
				lv_reps_3_0=ruleRep
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeRule());
					}
					add(
						$current,
						"reps",
						lv_reps_3_0,
						"org.metable.trek.Trek.Rep");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getTypeAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleRep
entryRuleRep returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRepRule()); }
	iv_ruleRep=ruleRep
	{ $current=$iv_ruleRep.current; }
	EOF;

// Rule Rep
ruleRep returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='rep'
		{
			newLeafNode(otherlv_0, grammarAccess.getRepAccess().getRepKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getRepAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRepRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getRepAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRepAccess().getComponentsRepComponentParserRuleCall_3_0());
				}
				lv_components_3_0=ruleRepComponent
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRepRule());
					}
					add(
						$current,
						"components",
						lv_components_3_0,
						"org.metable.trek.Trek.RepComponent");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getRepAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleRepComponent
entryRuleRepComponent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRepComponentRule()); }
	iv_ruleRepComponent=ruleRepComponent
	{ $current=$iv_ruleRepComponent.current; }
	EOF;

// Rule RepComponent
ruleRepComponent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRepComponentAccess().getTypeRepComponentTypeParserRuleCall_0_0());
				}
				lv_type_0_0=ruleRepComponentType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRepComponentRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"org.metable.trek.Trek.RepComponentType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getRepComponentAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRepComponentRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getRepComponentAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleRepComponentType
entryRuleRepComponentType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRepComponentTypeRule()); }
	iv_ruleRepComponentType=ruleRepComponentType
	{ $current=$iv_ruleRepComponentType.current; }
	EOF;

// Rule RepComponentType
ruleRepComponentType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRepComponentTypeAccess().getSystemTypeParserRuleCall_0());
		}
		this_SystemType_0=ruleSystemType
		{
			$current = $this_SystemType_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRepComponentTypeAccess().getTypeTypeParserRuleCall_1());
		}
		this_TypeType_1=ruleTypeType
		{
			$current = $this_TypeType_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSystemType
entryRuleSystemType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSystemTypeRule()); }
	iv_ruleSystemType=ruleSystemType
	{ $current=$iv_ruleSystemType.current; }
	EOF;

// Rule SystemType
ruleSystemType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_typeName_0_1='string'
				{
					newLeafNode(lv_typeName_0_1, grammarAccess.getSystemTypeAccess().getTypeNameStringKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSystemTypeRule());
					}
					setWithLastConsumed($current, "typeName", lv_typeName_0_1, null);
				}
				    |
				lv_typeName_0_2='int'
				{
					newLeafNode(lv_typeName_0_2, grammarAccess.getSystemTypeAccess().getTypeNameIntKeyword_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSystemTypeRule());
					}
					setWithLastConsumed($current, "typeName", lv_typeName_0_2, null);
				}
				    |
				lv_typeName_0_3='boolean'
				{
					newLeafNode(lv_typeName_0_3, grammarAccess.getSystemTypeAccess().getTypeNameBooleanKeyword_0_2());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSystemTypeRule());
					}
					setWithLastConsumed($current, "typeName", lv_typeName_0_3, null);
				}
				    |
				lv_typeName_0_4='char'
				{
					newLeafNode(lv_typeName_0_4, grammarAccess.getSystemTypeAccess().getTypeNameCharKeyword_0_3());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSystemTypeRule());
					}
					setWithLastConsumed($current, "typeName", lv_typeName_0_4, null);
				}
				    |
				lv_typeName_0_5='double'
				{
					newLeafNode(lv_typeName_0_5, grammarAccess.getSystemTypeAccess().getTypeNameDoubleKeyword_0_4());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSystemTypeRule());
					}
					setWithLastConsumed($current, "typeName", lv_typeName_0_5, null);
				}
			)
		)
	)
;

// Entry rule entryRuleTypeType
entryRuleTypeType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeTypeRule()); }
	iv_ruleTypeType=ruleTypeType
	{ $current=$iv_ruleTypeType.current; }
	EOF;

// Rule TypeType
ruleTypeType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getTypeTypeRule());
				}
			}
			otherlv_0=RULE_ID
			{
				newLeafNode(otherlv_0, grammarAccess.getTypeTypeAccess().getTypeTypeCrossReference_0());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
