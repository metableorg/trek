/*
 * generated by Xtext 2.31.0
 */
package org.metable.trek.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.metable.trek.trek.Rep
import org.metable.trek.trek.RepComponentType
import org.metable.trek.trek.SystemType
import org.metable.trek.trek.Type
import org.metable.trek.trek.TypeType

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class TrekGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		// Generate the interfaces
		for (type : resource.allContents.toIterable.filter(Type)) {
			fsa.generateFile("trek/type/" + type.name + ".java", type.compileInterface);
			fsa.generateFile("trek/type/" + type.name + "Impl.java", type.compileImpl);
		}
	}

	def compileInterface(Type type) {
		'''
			package trek.type;
					
			public interface «type.name» {
			    «FOR rep : type.reps»
			    	public static «type.name» «rep.name.toFirstLower»() {
			    	    «type.name»Impl «type.name.toFirstLower» = new «type.name»Impl();
			    	    return «type.name.toFirstLower»;
			    	  }
				«ENDFOR»
			}
		'''
	}

	def compileImpl(Type type) {
		'''
			package trek.type;
			
			class «type.name»Impl implements «type.name» {
				«type.name»Impl() {}
			
				«FOR rep : type.reps SEPARATOR System.lineSeparator»
					static class «rep.name» {
					    «FOR component : rep.components»
					    	final «component.type.typeToName» «component.name»;
					    «ENDFOR»
					
					    «rep.name»(«FOR component : rep.components SEPARATOR ', '»«component.type.typeToName» «component.name»«ENDFOR») {
							«FOR component : rep.components»
								this.«component.name» = «component.name»;
							«ENDFOR»
					    }
					}
				«ENDFOR»
			}
		'''
	}

	def toArgumentList(Rep rep) {
		'''
			«FOR component : rep.components SEPARATOR ','» «component.type.typeToName» «component.name»«ENDFOR»
		'''
	}

	def typeToName(RepComponentType componentType) {
		if (componentType instanceof SystemType) {
			(componentType as SystemType).typeName
		} else {
			(componentType as TypeType).type.name
		}
	}
}
