/**
 * generated by Xtext 2.31.0
 */
package org.metable.trek.generator;

import com.google.common.collect.Iterables;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.metable.trek.trek.Rep;
import org.metable.trek.trek.RepComponent;
import org.metable.trek.trek.RepComponentType;
import org.metable.trek.trek.SystemType;
import org.metable.trek.trek.Type;
import org.metable.trek.trek.TypeType;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class TrekGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<Type> _filter = Iterables.<Type>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Type.class);
    for (final Type type : _filter) {
      {
        String _name = type.getName();
        String _plus = ("trek/type/" + _name);
        String _plus_1 = (_plus + ".java");
        fsa.generateFile(_plus_1, this.compileInterface(type));
        String _name_1 = type.getName();
        String _plus_2 = ("trek/type/" + _name_1);
        String _plus_3 = (_plus_2 + "Impl.java");
        fsa.generateFile(_plus_3, this.compileImpl(type));
      }
    }
  }

  public CharSequence compileInterface(final Type type) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package trek.type;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("public interface ");
    String _name = type.getName();
    _builder.append(_name);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    {
      EList<Rep> _reps = type.getReps();
      for(final Rep rep : _reps) {
        _builder.append("    ");
        _builder.append("public static ");
        String _name_1 = type.getName();
        _builder.append(_name_1, "    ");
        _builder.append(" ");
        String _firstLower = StringExtensions.toFirstLower(rep.getName());
        _builder.append(_firstLower, "    ");
        _builder.append("() {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        String _name_2 = type.getName();
        _builder.append(_name_2, "        ");
        _builder.append("Impl ");
        String _firstLower_1 = StringExtensions.toFirstLower(type.getName());
        _builder.append(_firstLower_1, "        ");
        _builder.append(" = new ");
        String _name_3 = type.getName();
        _builder.append(_name_3, "        ");
        _builder.append("Impl();");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return ");
        String _firstLower_2 = StringExtensions.toFirstLower(type.getName());
        _builder.append(_firstLower_2, "        ");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("  ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }

  public CharSequence compileImpl(final Type type) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package trek.type;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class ");
    String _name = type.getName();
    _builder.append(_name);
    _builder.append("Impl implements ");
    String _name_1 = type.getName();
    _builder.append(_name_1);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    String _name_2 = type.getName();
    _builder.append(_name_2, "\t");
    _builder.append("Impl() {}");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    {
      EList<Rep> _reps = type.getReps();
      boolean _hasElements = false;
      for(final Rep rep : _reps) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          String _lineSeparator = System.lineSeparator();
          _builder.appendImmediate(_lineSeparator, "\t");
        }
        _builder.append("\t");
        _builder.append("static class ");
        String _name_3 = rep.getName();
        _builder.append(_name_3, "\t");
        _builder.append(" {");
        _builder.newLineIfNotEmpty();
        {
          EList<RepComponent> _components = rep.getComponents();
          for(final RepComponent component : _components) {
            _builder.append("\t");
            _builder.append("    ");
            _builder.append("final ");
            String _typeToName = this.typeToName(component.getType());
            _builder.append(_typeToName, "\t    ");
            _builder.append(" ");
            String _name_4 = component.getName();
            _builder.append(_name_4, "\t    ");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("    ");
        String _name_5 = rep.getName();
        _builder.append(_name_5, "\t    ");
        _builder.append("(");
        {
          EList<RepComponent> _components_1 = rep.getComponents();
          boolean _hasElements_1 = false;
          for(final RepComponent component_1 : _components_1) {
            if (!_hasElements_1) {
              _hasElements_1 = true;
            } else {
              _builder.appendImmediate(", ", "\t    ");
            }
            String _typeToName_1 = this.typeToName(component_1.getType());
            _builder.append(_typeToName_1, "\t    ");
            _builder.append(" ");
            String _name_6 = component_1.getName();
            _builder.append(_name_6, "\t    ");
          }
        }
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        {
          EList<RepComponent> _components_2 = rep.getComponents();
          for(final RepComponent component_2 : _components_2) {
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("this.");
            String _name_7 = component_2.getName();
            _builder.append(_name_7, "\t\t\t");
            _builder.append(" = ");
            String _name_8 = component_2.getName();
            _builder.append(_name_8, "\t\t\t");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }

  public CharSequence toArgumentList(final Rep rep) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<RepComponent> _components = rep.getComponents();
      boolean _hasElements = false;
      for(final RepComponent component : _components) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(",", "");
        }
        _builder.append(" ");
        String _typeToName = this.typeToName(component.getType());
        _builder.append(_typeToName);
        _builder.append(" ");
        String _name = component.getName();
        _builder.append(_name);
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder;
  }

  public String typeToName(final RepComponentType componentType) {
    String _xifexpression = null;
    if ((componentType instanceof SystemType)) {
      _xifexpression = ((SystemType) componentType).getTypeName();
    } else {
      _xifexpression = ((TypeType) componentType).getType().getName();
    }
    return _xifexpression;
  }
}
