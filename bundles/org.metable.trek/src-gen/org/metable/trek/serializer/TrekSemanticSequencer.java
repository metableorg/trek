/*
 * generated by Xtext 2.31.0
 */
package org.metable.trek.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.metable.trek.services.TrekGrammarAccess;
import org.metable.trek.trek.Model;
import org.metable.trek.trek.Rep;
import org.metable.trek.trek.RepComponent;
import org.metable.trek.trek.SystemType;
import org.metable.trek.trek.TrekPackage;
import org.metable.trek.trek.Type;
import org.metable.trek.trek.TypeType;

@SuppressWarnings("all")
public class TrekSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TrekGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == TrekPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TrekPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case TrekPackage.REP:
				sequence_Rep(context, (Rep) semanticObject); 
				return; 
			case TrekPackage.REP_COMPONENT:
				sequence_RepComponent(context, (RepComponent) semanticObject); 
				return; 
			case TrekPackage.SYSTEM_TYPE:
				sequence_SystemType(context, (SystemType) semanticObject); 
				return; 
			case TrekPackage.TYPE:
				sequence_Type(context, (Type) semanticObject); 
				return; 
			case TrekPackage.TYPE_TYPE:
				sequence_TypeType(context, (TypeType) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     type+=Type+
	 * </pre>
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     RepComponent returns RepComponent
	 *
	 * Constraint:
	 *     (type=RepComponentType name=ID)
	 * </pre>
	 */
	protected void sequence_RepComponent(ISerializationContext context, RepComponent semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TrekPackage.Literals.REP_COMPONENT__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TrekPackage.Literals.REP_COMPONENT__TYPE));
			if (transientValues.isValueTransient(semanticObject, TrekPackage.Literals.REP_COMPONENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TrekPackage.Literals.REP_COMPONENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRepComponentAccess().getTypeRepComponentTypeParserRuleCall_0_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getRepComponentAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Rep returns Rep
	 *
	 * Constraint:
	 *     (name=ID components+=RepComponent+)
	 * </pre>
	 */
	protected void sequence_Rep(ISerializationContext context, Rep semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     RepComponentType returns SystemType
	 *     SystemType returns SystemType
	 *
	 * Constraint:
	 *     (typeName='string' | typeName='int' | typeName='boolean' | typeName='char' | typeName='double')
	 * </pre>
	 */
	protected void sequence_SystemType(ISerializationContext context, SystemType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     RepComponentType returns TypeType
	 *     TypeType returns TypeType
	 *
	 * Constraint:
	 *     type=[Type|ID]
	 * </pre>
	 */
	protected void sequence_TypeType(ISerializationContext context, TypeType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TrekPackage.Literals.TYPE_TYPE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TrekPackage.Literals.TYPE_TYPE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTypeTypeAccess().getTypeTypeIDTerminalRuleCall_0_1(), semanticObject.eGet(TrekPackage.Literals.TYPE_TYPE__TYPE, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Type returns Type
	 *
	 * Constraint:
	 *     (name=ID reps+=Rep*)
	 * </pre>
	 */
	protected void sequence_Type(ISerializationContext context, Type semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
