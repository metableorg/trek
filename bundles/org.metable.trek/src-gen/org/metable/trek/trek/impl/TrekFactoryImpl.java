/**
 * generated by Xtext 2.31.0
 */
package org.metable.trek.trek.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.metable.trek.trek.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class TrekFactoryImpl extends EFactoryImpl implements TrekFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static TrekFactory init()
  {
    try
    {
      TrekFactory theTrekFactory = (TrekFactory)EPackage.Registry.INSTANCE.getEFactory(TrekPackage.eNS_URI);
      if (theTrekFactory != null)
      {
        return theTrekFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new TrekFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TrekFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case TrekPackage.MODEL: return createModel();
      case TrekPackage.TYPE: return createType();
      case TrekPackage.REP: return createRep();
      case TrekPackage.REP_COMPONENT: return createRepComponent();
      case TrekPackage.REP_COMPONENT_TYPE: return createRepComponentType();
      case TrekPackage.SYSTEM_TYPE: return createSystemType();
      case TrekPackage.TYPE_TYPE: return createTypeType();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Type createType()
  {
    TypeImpl type = new TypeImpl();
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Rep createRep()
  {
    RepImpl rep = new RepImpl();
    return rep;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RepComponent createRepComponent()
  {
    RepComponentImpl repComponent = new RepComponentImpl();
    return repComponent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RepComponentType createRepComponentType()
  {
    RepComponentTypeImpl repComponentType = new RepComponentTypeImpl();
    return repComponentType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SystemType createSystemType()
  {
    SystemTypeImpl systemType = new SystemTypeImpl();
    return systemType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TypeType createTypeType()
  {
    TypeTypeImpl typeType = new TypeTypeImpl();
    return typeType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TrekPackage getTrekPackage()
  {
    return (TrekPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static TrekPackage getPackage()
  {
    return TrekPackage.eINSTANCE;
  }

} //TrekFactoryImpl
